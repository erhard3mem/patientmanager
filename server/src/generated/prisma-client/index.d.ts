// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  diagnosis: (where?: DiagnosisWhereInput) => Promise<boolean>;
  insurance: (where?: InsuranceWhereInput) => Promise<boolean>;
  medication: (where?: MedicationWhereInput) => Promise<boolean>;
  patient: (where?: PatientWhereInput) => Promise<boolean>;
  prescription: (where?: PrescriptionWhereInput) => Promise<boolean>;
  record: (where?: RecordWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  diagnosis: (where: DiagnosisWhereUniqueInput) => DiagnosisNullablePromise;
  diagnoses: (args?: {
    where?: DiagnosisWhereInput;
    orderBy?: DiagnosisOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Diagnosis>;
  diagnosesConnection: (args?: {
    where?: DiagnosisWhereInput;
    orderBy?: DiagnosisOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DiagnosisConnectionPromise;
  insurance: (where: InsuranceWhereUniqueInput) => InsuranceNullablePromise;
  insurances: (args?: {
    where?: InsuranceWhereInput;
    orderBy?: InsuranceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Insurance>;
  insurancesConnection: (args?: {
    where?: InsuranceWhereInput;
    orderBy?: InsuranceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InsuranceConnectionPromise;
  medication: (where: MedicationWhereUniqueInput) => MedicationNullablePromise;
  medications: (args?: {
    where?: MedicationWhereInput;
    orderBy?: MedicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Medication>;
  medicationsConnection: (args?: {
    where?: MedicationWhereInput;
    orderBy?: MedicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MedicationConnectionPromise;
  patient: (where: PatientWhereUniqueInput) => PatientNullablePromise;
  patients: (args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Patient>;
  patientsConnection: (args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PatientConnectionPromise;
  prescription: (
    where: PrescriptionWhereUniqueInput
  ) => PrescriptionNullablePromise;
  prescriptions: (args?: {
    where?: PrescriptionWhereInput;
    orderBy?: PrescriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Prescription>;
  prescriptionsConnection: (args?: {
    where?: PrescriptionWhereInput;
    orderBy?: PrescriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PrescriptionConnectionPromise;
  record: (where: RecordWhereUniqueInput) => RecordNullablePromise;
  records: (args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Record>;
  recordsConnection: (args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecordConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDiagnosis: (data: DiagnosisCreateInput) => DiagnosisPromise;
  updateDiagnosis: (args: {
    data: DiagnosisUpdateInput;
    where: DiagnosisWhereUniqueInput;
  }) => DiagnosisPromise;
  updateManyDiagnoses: (args: {
    data: DiagnosisUpdateManyMutationInput;
    where?: DiagnosisWhereInput;
  }) => BatchPayloadPromise;
  upsertDiagnosis: (args: {
    where: DiagnosisWhereUniqueInput;
    create: DiagnosisCreateInput;
    update: DiagnosisUpdateInput;
  }) => DiagnosisPromise;
  deleteDiagnosis: (where: DiagnosisWhereUniqueInput) => DiagnosisPromise;
  deleteManyDiagnoses: (where?: DiagnosisWhereInput) => BatchPayloadPromise;
  createInsurance: (data: InsuranceCreateInput) => InsurancePromise;
  updateInsurance: (args: {
    data: InsuranceUpdateInput;
    where: InsuranceWhereUniqueInput;
  }) => InsurancePromise;
  updateManyInsurances: (args: {
    data: InsuranceUpdateManyMutationInput;
    where?: InsuranceWhereInput;
  }) => BatchPayloadPromise;
  upsertInsurance: (args: {
    where: InsuranceWhereUniqueInput;
    create: InsuranceCreateInput;
    update: InsuranceUpdateInput;
  }) => InsurancePromise;
  deleteInsurance: (where: InsuranceWhereUniqueInput) => InsurancePromise;
  deleteManyInsurances: (where?: InsuranceWhereInput) => BatchPayloadPromise;
  createMedication: (data: MedicationCreateInput) => MedicationPromise;
  updateMedication: (args: {
    data: MedicationUpdateInput;
    where: MedicationWhereUniqueInput;
  }) => MedicationPromise;
  updateManyMedications: (args: {
    data: MedicationUpdateManyMutationInput;
    where?: MedicationWhereInput;
  }) => BatchPayloadPromise;
  upsertMedication: (args: {
    where: MedicationWhereUniqueInput;
    create: MedicationCreateInput;
    update: MedicationUpdateInput;
  }) => MedicationPromise;
  deleteMedication: (where: MedicationWhereUniqueInput) => MedicationPromise;
  deleteManyMedications: (where?: MedicationWhereInput) => BatchPayloadPromise;
  createPatient: (data: PatientCreateInput) => PatientPromise;
  updatePatient: (args: {
    data: PatientUpdateInput;
    where: PatientWhereUniqueInput;
  }) => PatientPromise;
  updateManyPatients: (args: {
    data: PatientUpdateManyMutationInput;
    where?: PatientWhereInput;
  }) => BatchPayloadPromise;
  upsertPatient: (args: {
    where: PatientWhereUniqueInput;
    create: PatientCreateInput;
    update: PatientUpdateInput;
  }) => PatientPromise;
  deletePatient: (where: PatientWhereUniqueInput) => PatientPromise;
  deleteManyPatients: (where?: PatientWhereInput) => BatchPayloadPromise;
  createPrescription: (data: PrescriptionCreateInput) => PrescriptionPromise;
  updatePrescription: (args: {
    data: PrescriptionUpdateInput;
    where: PrescriptionWhereUniqueInput;
  }) => PrescriptionPromise;
  updateManyPrescriptions: (args: {
    data: PrescriptionUpdateManyMutationInput;
    where?: PrescriptionWhereInput;
  }) => BatchPayloadPromise;
  upsertPrescription: (args: {
    where: PrescriptionWhereUniqueInput;
    create: PrescriptionCreateInput;
    update: PrescriptionUpdateInput;
  }) => PrescriptionPromise;
  deletePrescription: (
    where: PrescriptionWhereUniqueInput
  ) => PrescriptionPromise;
  deleteManyPrescriptions: (
    where?: PrescriptionWhereInput
  ) => BatchPayloadPromise;
  createRecord: (data: RecordCreateInput) => RecordPromise;
  updateRecord: (args: {
    data: RecordUpdateInput;
    where: RecordWhereUniqueInput;
  }) => RecordPromise;
  updateManyRecords: (args: {
    data: RecordUpdateManyMutationInput;
    where?: RecordWhereInput;
  }) => BatchPayloadPromise;
  upsertRecord: (args: {
    where: RecordWhereUniqueInput;
    create: RecordCreateInput;
    update: RecordUpdateInput;
  }) => RecordPromise;
  deleteRecord: (where: RecordWhereUniqueInput) => RecordPromise;
  deleteManyRecords: (where?: RecordWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  diagnosis: (
    where?: DiagnosisSubscriptionWhereInput
  ) => DiagnosisSubscriptionPayloadSubscription;
  insurance: (
    where?: InsuranceSubscriptionWhereInput
  ) => InsuranceSubscriptionPayloadSubscription;
  medication: (
    where?: MedicationSubscriptionWhereInput
  ) => MedicationSubscriptionPayloadSubscription;
  patient: (
    where?: PatientSubscriptionWhereInput
  ) => PatientSubscriptionPayloadSubscription;
  prescription: (
    where?: PrescriptionSubscriptionWhereInput
  ) => PrescriptionSubscriptionPayloadSubscription;
  record: (
    where?: RecordSubscriptionWhereInput
  ) => RecordSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type InsuranceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type MedicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type RecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "details_ASC"
  | "details_DESC"
  | "discharged_ASC"
  | "discharged_DESC";

export type PrescriptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dosis_ASC"
  | "dosis_DESC";

export type DiagnosisOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type PatientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fName_ASC"
  | "fName_DESC"
  | "lName_ASC"
  | "lName_DESC"
  | "bDate_ASC"
  | "bDate_DESC"
  | "sex_ASC"
  | "sex_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DiagnosisCreateOneInput {
  create?: Maybe<DiagnosisCreateInput>;
  connect?: Maybe<DiagnosisWhereUniqueInput>;
}

export type DiagnosisWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PatientUpdateManyMutationInput {
  fName?: Maybe<String>;
  lName?: Maybe<String>;
  bDate?: Maybe<String>;
  sex?: Maybe<String>;
}

export interface MedicationUpdateOneInput {
  create?: Maybe<MedicationCreateInput>;
  update?: Maybe<MedicationUpdateDataInput>;
  upsert?: Maybe<MedicationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MedicationWhereUniqueInput>;
}

export interface PrescriptionUpdateManyDataInput {
  dosis?: Maybe<String>;
}

export interface InsuranceUpdateOneInput {
  create?: Maybe<InsuranceCreateInput>;
  update?: Maybe<InsuranceUpdateDataInput>;
  upsert?: Maybe<InsuranceUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<InsuranceWhereUniqueInput>;
}

export interface PrescriptionUpdateManyWithWhereNestedInput {
  where: PrescriptionScalarWhereInput;
  data: PrescriptionUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface RecordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecordWhereInput>;
  AND?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
  OR?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
  NOT?: Maybe<RecordSubscriptionWhereInput[] | RecordSubscriptionWhereInput>;
}

export interface PatientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PatientWhereInput>;
  AND?: Maybe<PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput>;
  OR?: Maybe<PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput>;
  NOT?: Maybe<PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput>;
}

export interface DiagnosisCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export type MedicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DiagnosisUpdateInput {
  name?: Maybe<String>;
}

export interface MedicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<MedicationWhereInput[] | MedicationWhereInput>;
  OR?: Maybe<MedicationWhereInput[] | MedicationWhereInput>;
  NOT?: Maybe<MedicationWhereInput[] | MedicationWhereInput>;
}

export interface DiagnosisUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface PrescriptionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  dosis?: Maybe<String>;
  dosis_not?: Maybe<String>;
  dosis_in?: Maybe<String[] | String>;
  dosis_not_in?: Maybe<String[] | String>;
  dosis_lt?: Maybe<String>;
  dosis_lte?: Maybe<String>;
  dosis_gt?: Maybe<String>;
  dosis_gte?: Maybe<String>;
  dosis_contains?: Maybe<String>;
  dosis_not_contains?: Maybe<String>;
  dosis_starts_with?: Maybe<String>;
  dosis_not_starts_with?: Maybe<String>;
  dosis_ends_with?: Maybe<String>;
  dosis_not_ends_with?: Maybe<String>;
  AND?: Maybe<PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput>;
  OR?: Maybe<PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput>;
  NOT?: Maybe<PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
}

export interface PrescriptionUpsertWithWhereUniqueWithoutPatientInput {
  where: PrescriptionWhereUniqueInput;
  update: PrescriptionUpdateWithoutPatientDataInput;
  create: PrescriptionCreateWithoutPatientInput;
}

export interface RecordUpdateManyMutationInput {
  date?: Maybe<String>;
  details?: Maybe<String>;
  discharged?: Maybe<Boolean>;
}

export interface InsuranceCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface PatientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  fName?: Maybe<String>;
  fName_not?: Maybe<String>;
  fName_in?: Maybe<String[] | String>;
  fName_not_in?: Maybe<String[] | String>;
  fName_lt?: Maybe<String>;
  fName_lte?: Maybe<String>;
  fName_gt?: Maybe<String>;
  fName_gte?: Maybe<String>;
  fName_contains?: Maybe<String>;
  fName_not_contains?: Maybe<String>;
  fName_starts_with?: Maybe<String>;
  fName_not_starts_with?: Maybe<String>;
  fName_ends_with?: Maybe<String>;
  fName_not_ends_with?: Maybe<String>;
  lName?: Maybe<String>;
  lName_not?: Maybe<String>;
  lName_in?: Maybe<String[] | String>;
  lName_not_in?: Maybe<String[] | String>;
  lName_lt?: Maybe<String>;
  lName_lte?: Maybe<String>;
  lName_gt?: Maybe<String>;
  lName_gte?: Maybe<String>;
  lName_contains?: Maybe<String>;
  lName_not_contains?: Maybe<String>;
  lName_starts_with?: Maybe<String>;
  lName_not_starts_with?: Maybe<String>;
  lName_ends_with?: Maybe<String>;
  lName_not_ends_with?: Maybe<String>;
  bDate?: Maybe<String>;
  bDate_not?: Maybe<String>;
  bDate_in?: Maybe<String[] | String>;
  bDate_not_in?: Maybe<String[] | String>;
  bDate_lt?: Maybe<String>;
  bDate_lte?: Maybe<String>;
  bDate_gt?: Maybe<String>;
  bDate_gte?: Maybe<String>;
  bDate_contains?: Maybe<String>;
  bDate_not_contains?: Maybe<String>;
  bDate_starts_with?: Maybe<String>;
  bDate_not_starts_with?: Maybe<String>;
  bDate_ends_with?: Maybe<String>;
  bDate_not_ends_with?: Maybe<String>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  insurance?: Maybe<InsuranceWhereInput>;
  records_every?: Maybe<RecordWhereInput>;
  records_some?: Maybe<RecordWhereInput>;
  records_none?: Maybe<RecordWhereInput>;
  prescriptions_every?: Maybe<PrescriptionWhereInput>;
  prescriptions_some?: Maybe<PrescriptionWhereInput>;
  prescriptions_none?: Maybe<PrescriptionWhereInput>;
  AND?: Maybe<PatientWhereInput[] | PatientWhereInput>;
  OR?: Maybe<PatientWhereInput[] | PatientWhereInput>;
  NOT?: Maybe<PatientWhereInput[] | PatientWhereInput>;
}

export interface InsuranceUpdateInput {
  name?: Maybe<String>;
}

export interface PatientUpsertWithoutRecordsInput {
  update: PatientUpdateWithoutRecordsDataInput;
  create: PatientCreateWithoutRecordsInput;
}

export interface InsuranceUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface PatientUpdateOneWithoutRecordsInput {
  create?: Maybe<PatientCreateWithoutRecordsInput>;
  update?: Maybe<PatientUpdateWithoutRecordsDataInput>;
  upsert?: Maybe<PatientUpsertWithoutRecordsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PatientWhereUniqueInput>;
}

export interface MedicationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface DiagnosisWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<DiagnosisWhereInput[] | DiagnosisWhereInput>;
  OR?: Maybe<DiagnosisWhereInput[] | DiagnosisWhereInput>;
  NOT?: Maybe<DiagnosisWhereInput[] | DiagnosisWhereInput>;
}

export interface MedicationUpdateInput {
  name?: Maybe<String>;
}

export interface PatientCreateOneWithoutRecordsInput {
  create?: Maybe<PatientCreateWithoutRecordsInput>;
  connect?: Maybe<PatientWhereUniqueInput>;
}

export interface MedicationUpdateManyMutationInput {
  name?: Maybe<String>;
}

export type PrescriptionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PatientCreateInput {
  id?: Maybe<ID_Input>;
  fName: String;
  lName: String;
  bDate: String;
  sex: String;
  insurance?: Maybe<InsuranceCreateOneInput>;
  records?: Maybe<RecordCreateManyWithoutPatientInput>;
  prescriptions?: Maybe<PrescriptionCreateManyWithoutPatientInput>;
}

export interface PatientUpsertWithoutPrescriptionsInput {
  update: PatientUpdateWithoutPrescriptionsDataInput;
  create: PatientCreateWithoutPrescriptionsInput;
}

export interface InsuranceCreateOneInput {
  create?: Maybe<InsuranceCreateInput>;
  connect?: Maybe<InsuranceWhereUniqueInput>;
}

export type RecordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RecordCreateManyWithoutPatientInput {
  create?: Maybe<
    RecordCreateWithoutPatientInput[] | RecordCreateWithoutPatientInput
  >;
  connect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
}

export interface PrescriptionUpdateInput {
  patient?: Maybe<PatientUpdateOneWithoutPrescriptionsInput>;
  medication?: Maybe<MedicationUpdateOneInput>;
  diagnosis?: Maybe<DiagnosisUpdateOneInput>;
  dosis?: Maybe<String>;
}

export interface RecordCreateWithoutPatientInput {
  id?: Maybe<ID_Input>;
  diagnosis?: Maybe<DiagnosisCreateOneInput>;
  date: String;
  details: String;
  discharged: Boolean;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface MedicationUpsertNestedInput {
  update: MedicationUpdateDataInput;
  create: MedicationCreateInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PrescriptionCreateManyWithoutPatientInput {
  create?: Maybe<
    | PrescriptionCreateWithoutPatientInput[]
    | PrescriptionCreateWithoutPatientInput
  >;
  connect?: Maybe<
    PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput
  >;
}

export type InsuranceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PrescriptionCreateWithoutPatientInput {
  id?: Maybe<ID_Input>;
  medication?: Maybe<MedicationCreateOneInput>;
  diagnosis?: Maybe<DiagnosisCreateOneInput>;
  dosis: String;
}

export interface PrescriptionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PrescriptionWhereInput>;
  AND?: Maybe<
    PrescriptionSubscriptionWhereInput[] | PrescriptionSubscriptionWhereInput
  >;
  OR?: Maybe<
    PrescriptionSubscriptionWhereInput[] | PrescriptionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PrescriptionSubscriptionWhereInput[] | PrescriptionSubscriptionWhereInput
  >;
}

export interface MedicationCreateOneInput {
  create?: Maybe<MedicationCreateInput>;
  connect?: Maybe<MedicationWhereUniqueInput>;
}

export interface InsuranceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InsuranceWhereInput>;
  AND?: Maybe<
    InsuranceSubscriptionWhereInput[] | InsuranceSubscriptionWhereInput
  >;
  OR?: Maybe<
    InsuranceSubscriptionWhereInput[] | InsuranceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InsuranceSubscriptionWhereInput[] | InsuranceSubscriptionWhereInput
  >;
}

export interface PatientUpdateInput {
  fName?: Maybe<String>;
  lName?: Maybe<String>;
  bDate?: Maybe<String>;
  sex?: Maybe<String>;
  insurance?: Maybe<InsuranceUpdateOneInput>;
  records?: Maybe<RecordUpdateManyWithoutPatientInput>;
  prescriptions?: Maybe<PrescriptionUpdateManyWithoutPatientInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface MedicationUpdateDataInput {
  name?: Maybe<String>;
}

export interface RecordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  patient?: Maybe<PatientWhereInput>;
  diagnosis?: Maybe<DiagnosisWhereInput>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  details?: Maybe<String>;
  details_not?: Maybe<String>;
  details_in?: Maybe<String[] | String>;
  details_not_in?: Maybe<String[] | String>;
  details_lt?: Maybe<String>;
  details_lte?: Maybe<String>;
  details_gt?: Maybe<String>;
  details_gte?: Maybe<String>;
  details_contains?: Maybe<String>;
  details_not_contains?: Maybe<String>;
  details_starts_with?: Maybe<String>;
  details_not_starts_with?: Maybe<String>;
  details_ends_with?: Maybe<String>;
  details_not_ends_with?: Maybe<String>;
  discharged?: Maybe<Boolean>;
  discharged_not?: Maybe<Boolean>;
  AND?: Maybe<RecordWhereInput[] | RecordWhereInput>;
  OR?: Maybe<RecordWhereInput[] | RecordWhereInput>;
  NOT?: Maybe<RecordWhereInput[] | RecordWhereInput>;
}

export interface InsuranceUpdateDataInput {
  name?: Maybe<String>;
}

export interface PatientUpdateWithoutRecordsDataInput {
  fName?: Maybe<String>;
  lName?: Maybe<String>;
  bDate?: Maybe<String>;
  sex?: Maybe<String>;
  insurance?: Maybe<InsuranceUpdateOneInput>;
  prescriptions?: Maybe<PrescriptionUpdateManyWithoutPatientInput>;
}

export interface InsuranceUpsertNestedInput {
  update: InsuranceUpdateDataInput;
  create: InsuranceCreateInput;
}

export interface PatientCreateWithoutRecordsInput {
  id?: Maybe<ID_Input>;
  fName: String;
  lName: String;
  bDate: String;
  sex: String;
  insurance?: Maybe<InsuranceCreateOneInput>;
  prescriptions?: Maybe<PrescriptionCreateManyWithoutPatientInput>;
}

export interface RecordUpdateManyWithoutPatientInput {
  create?: Maybe<
    RecordCreateWithoutPatientInput[] | RecordCreateWithoutPatientInput
  >;
  delete?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  connect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  set?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  disconnect?: Maybe<RecordWhereUniqueInput[] | RecordWhereUniqueInput>;
  update?: Maybe<
    | RecordUpdateWithWhereUniqueWithoutPatientInput[]
    | RecordUpdateWithWhereUniqueWithoutPatientInput
  >;
  upsert?: Maybe<
    | RecordUpsertWithWhereUniqueWithoutPatientInput[]
    | RecordUpsertWithWhereUniqueWithoutPatientInput
  >;
  deleteMany?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
  updateMany?: Maybe<
    | RecordUpdateManyWithWhereNestedInput[]
    | RecordUpdateManyWithWhereNestedInput
  >;
}

export interface PrescriptionUpdateManyMutationInput {
  dosis?: Maybe<String>;
}

export interface RecordUpdateWithWhereUniqueWithoutPatientInput {
  where: RecordWhereUniqueInput;
  data: RecordUpdateWithoutPatientDataInput;
}

export interface PatientUpdateOneWithoutPrescriptionsInput {
  create?: Maybe<PatientCreateWithoutPrescriptionsInput>;
  update?: Maybe<PatientUpdateWithoutPrescriptionsDataInput>;
  upsert?: Maybe<PatientUpsertWithoutPrescriptionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PatientWhereUniqueInput>;
}

export interface RecordUpdateWithoutPatientDataInput {
  diagnosis?: Maybe<DiagnosisUpdateOneInput>;
  date?: Maybe<String>;
  details?: Maybe<String>;
  discharged?: Maybe<Boolean>;
}

export interface PatientCreateOneWithoutPrescriptionsInput {
  create?: Maybe<PatientCreateWithoutPrescriptionsInput>;
  connect?: Maybe<PatientWhereUniqueInput>;
}

export interface DiagnosisUpdateOneInput {
  create?: Maybe<DiagnosisCreateInput>;
  update?: Maybe<DiagnosisUpdateDataInput>;
  upsert?: Maybe<DiagnosisUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<DiagnosisWhereUniqueInput>;
}

export interface InsuranceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<InsuranceWhereInput[] | InsuranceWhereInput>;
  OR?: Maybe<InsuranceWhereInput[] | InsuranceWhereInput>;
  NOT?: Maybe<InsuranceWhereInput[] | InsuranceWhereInput>;
}

export interface DiagnosisUpdateDataInput {
  name?: Maybe<String>;
}

export interface DiagnosisSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DiagnosisWhereInput>;
  AND?: Maybe<
    DiagnosisSubscriptionWhereInput[] | DiagnosisSubscriptionWhereInput
  >;
  OR?: Maybe<
    DiagnosisSubscriptionWhereInput[] | DiagnosisSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DiagnosisSubscriptionWhereInput[] | DiagnosisSubscriptionWhereInput
  >;
}

export interface DiagnosisUpsertNestedInput {
  update: DiagnosisUpdateDataInput;
  create: DiagnosisCreateInput;
}

export interface PrescriptionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  patient?: Maybe<PatientWhereInput>;
  medication?: Maybe<MedicationWhereInput>;
  diagnosis?: Maybe<DiagnosisWhereInput>;
  dosis?: Maybe<String>;
  dosis_not?: Maybe<String>;
  dosis_in?: Maybe<String[] | String>;
  dosis_not_in?: Maybe<String[] | String>;
  dosis_lt?: Maybe<String>;
  dosis_lte?: Maybe<String>;
  dosis_gt?: Maybe<String>;
  dosis_gte?: Maybe<String>;
  dosis_contains?: Maybe<String>;
  dosis_not_contains?: Maybe<String>;
  dosis_starts_with?: Maybe<String>;
  dosis_not_starts_with?: Maybe<String>;
  dosis_ends_with?: Maybe<String>;
  dosis_not_ends_with?: Maybe<String>;
  AND?: Maybe<PrescriptionWhereInput[] | PrescriptionWhereInput>;
  OR?: Maybe<PrescriptionWhereInput[] | PrescriptionWhereInput>;
  NOT?: Maybe<PrescriptionWhereInput[] | PrescriptionWhereInput>;
}

export interface RecordUpsertWithWhereUniqueWithoutPatientInput {
  where: RecordWhereUniqueInput;
  update: RecordUpdateWithoutPatientDataInput;
  create: RecordCreateWithoutPatientInput;
}

export interface RecordCreateInput {
  id?: Maybe<ID_Input>;
  patient?: Maybe<PatientCreateOneWithoutRecordsInput>;
  diagnosis?: Maybe<DiagnosisCreateOneInput>;
  date: String;
  details: String;
  discharged: Boolean;
}

export interface RecordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  details?: Maybe<String>;
  details_not?: Maybe<String>;
  details_in?: Maybe<String[] | String>;
  details_not_in?: Maybe<String[] | String>;
  details_lt?: Maybe<String>;
  details_lte?: Maybe<String>;
  details_gt?: Maybe<String>;
  details_gte?: Maybe<String>;
  details_contains?: Maybe<String>;
  details_not_contains?: Maybe<String>;
  details_starts_with?: Maybe<String>;
  details_not_starts_with?: Maybe<String>;
  details_ends_with?: Maybe<String>;
  details_not_ends_with?: Maybe<String>;
  discharged?: Maybe<Boolean>;
  discharged_not?: Maybe<Boolean>;
  AND?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
  OR?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
  NOT?: Maybe<RecordScalarWhereInput[] | RecordScalarWhereInput>;
}

export interface PatientCreateWithoutPrescriptionsInput {
  id?: Maybe<ID_Input>;
  fName: String;
  lName: String;
  bDate: String;
  sex: String;
  insurance?: Maybe<InsuranceCreateOneInput>;
  records?: Maybe<RecordCreateManyWithoutPatientInput>;
}

export interface RecordUpdateManyWithWhereNestedInput {
  where: RecordScalarWhereInput;
  data: RecordUpdateManyDataInput;
}

export interface MedicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MedicationWhereInput>;
  AND?: Maybe<
    MedicationSubscriptionWhereInput[] | MedicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    MedicationSubscriptionWhereInput[] | MedicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MedicationSubscriptionWhereInput[] | MedicationSubscriptionWhereInput
  >;
}

export interface PrescriptionUpdateWithoutPatientDataInput {
  medication?: Maybe<MedicationUpdateOneInput>;
  diagnosis?: Maybe<DiagnosisUpdateOneInput>;
  dosis?: Maybe<String>;
}

export interface PrescriptionUpdateWithWhereUniqueWithoutPatientInput {
  where: PrescriptionWhereUniqueInput;
  data: PrescriptionUpdateWithoutPatientDataInput;
}

export interface PrescriptionUpdateManyWithoutPatientInput {
  create?: Maybe<
    | PrescriptionCreateWithoutPatientInput[]
    | PrescriptionCreateWithoutPatientInput
  >;
  delete?: Maybe<PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput>;
  connect?: Maybe<
    PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput
  >;
  set?: Maybe<PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput>;
  disconnect?: Maybe<
    PrescriptionWhereUniqueInput[] | PrescriptionWhereUniqueInput
  >;
  update?: Maybe<
    | PrescriptionUpdateWithWhereUniqueWithoutPatientInput[]
    | PrescriptionUpdateWithWhereUniqueWithoutPatientInput
  >;
  upsert?: Maybe<
    | PrescriptionUpsertWithWhereUniqueWithoutPatientInput[]
    | PrescriptionUpsertWithWhereUniqueWithoutPatientInput
  >;
  deleteMany?: Maybe<
    PrescriptionScalarWhereInput[] | PrescriptionScalarWhereInput
  >;
  updateMany?: Maybe<
    | PrescriptionUpdateManyWithWhereNestedInput[]
    | PrescriptionUpdateManyWithWhereNestedInput
  >;
}

export interface RecordUpdateManyDataInput {
  date?: Maybe<String>;
  details?: Maybe<String>;
  discharged?: Maybe<Boolean>;
}

export type PatientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PrescriptionCreateInput {
  id?: Maybe<ID_Input>;
  patient?: Maybe<PatientCreateOneWithoutPrescriptionsInput>;
  medication?: Maybe<MedicationCreateOneInput>;
  diagnosis?: Maybe<DiagnosisCreateOneInput>;
  dosis: String;
}

export interface PatientUpdateWithoutPrescriptionsDataInput {
  fName?: Maybe<String>;
  lName?: Maybe<String>;
  bDate?: Maybe<String>;
  sex?: Maybe<String>;
  insurance?: Maybe<InsuranceUpdateOneInput>;
  records?: Maybe<RecordUpdateManyWithoutPatientInput>;
}

export interface RecordUpdateInput {
  patient?: Maybe<PatientUpdateOneWithoutRecordsInput>;
  diagnosis?: Maybe<DiagnosisUpdateOneInput>;
  date?: Maybe<String>;
  details?: Maybe<String>;
  discharged?: Maybe<Boolean>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface MedicationEdge {
  node: Medication;
  cursor: String;
}

export interface MedicationEdgePromise
  extends Promise<MedicationEdge>,
    Fragmentable {
  node: <T = MedicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MedicationEdgeSubscription
  extends Promise<AsyncIterator<MedicationEdge>>,
    Fragmentable {
  node: <T = MedicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DiagnosisEdge {
  node: Diagnosis;
  cursor: String;
}

export interface DiagnosisEdgePromise
  extends Promise<DiagnosisEdge>,
    Fragmentable {
  node: <T = DiagnosisPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiagnosisEdgeSubscription
  extends Promise<AsyncIterator<DiagnosisEdge>>,
    Fragmentable {
  node: <T = DiagnosisSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MedicationConnection {
  pageInfo: PageInfo;
  edges: MedicationEdge[];
}

export interface MedicationConnectionPromise
  extends Promise<MedicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MedicationEdge>>() => T;
  aggregate: <T = AggregateMedicationPromise>() => T;
}

export interface MedicationConnectionSubscription
  extends Promise<AsyncIterator<MedicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MedicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMedicationSubscription>() => T;
}

export interface AggregateDiagnosis {
  count: Int;
}

export interface AggregateDiagnosisPromise
  extends Promise<AggregateDiagnosis>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiagnosisSubscription
  extends Promise<AsyncIterator<AggregateDiagnosis>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Diagnosis {
  id: ID_Output;
  name: String;
}

export interface DiagnosisPromise extends Promise<Diagnosis>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DiagnosisSubscription
  extends Promise<AsyncIterator<Diagnosis>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface DiagnosisNullablePromise
  extends Promise<Diagnosis | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface DiagnosisSubscriptionPayload {
  mutation: MutationType;
  node: Diagnosis;
  updatedFields: String[];
  previousValues: DiagnosisPreviousValues;
}

export interface DiagnosisSubscriptionPayloadPromise
  extends Promise<DiagnosisSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiagnosisPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiagnosisPreviousValuesPromise>() => T;
}

export interface DiagnosisSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiagnosisSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiagnosisSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiagnosisPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface DiagnosisPreviousValues {
  id: ID_Output;
  name: String;
}

export interface DiagnosisPreviousValuesPromise
  extends Promise<DiagnosisPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface DiagnosisPreviousValuesSubscription
  extends Promise<AsyncIterator<DiagnosisPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RecordEdge {
  node: Record;
  cursor: String;
}

export interface RecordEdgePromise extends Promise<RecordEdge>, Fragmentable {
  node: <T = RecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecordEdgeSubscription
  extends Promise<AsyncIterator<RecordEdge>>,
    Fragmentable {
  node: <T = RecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Medication {
  id: ID_Output;
  name: String;
}

export interface MedicationPromise extends Promise<Medication>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface MedicationSubscription
  extends Promise<AsyncIterator<Medication>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface MedicationNullablePromise
  extends Promise<Medication | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AggregatePrescription {
  count: Int;
}

export interface AggregatePrescriptionPromise
  extends Promise<AggregatePrescription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePrescriptionSubscription
  extends Promise<AsyncIterator<AggregatePrescription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InsuranceSubscriptionPayload {
  mutation: MutationType;
  node: Insurance;
  updatedFields: String[];
  previousValues: InsurancePreviousValues;
}

export interface InsuranceSubscriptionPayloadPromise
  extends Promise<InsuranceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InsurancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InsurancePreviousValuesPromise>() => T;
}

export interface InsuranceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InsuranceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InsuranceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InsurancePreviousValuesSubscription>() => T;
}

export interface PrescriptionConnection {
  pageInfo: PageInfo;
  edges: PrescriptionEdge[];
}

export interface PrescriptionConnectionPromise
  extends Promise<PrescriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PrescriptionEdge>>() => T;
  aggregate: <T = AggregatePrescriptionPromise>() => T;
}

export interface PrescriptionConnectionSubscription
  extends Promise<AsyncIterator<PrescriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PrescriptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePrescriptionSubscription>() => T;
}

export interface InsurancePreviousValues {
  id: ID_Output;
  name: String;
}

export interface InsurancePreviousValuesPromise
  extends Promise<InsurancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface InsurancePreviousValuesSubscription
  extends Promise<AsyncIterator<InsurancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PatientEdge {
  node: Patient;
  cursor: String;
}

export interface PatientEdgePromise extends Promise<PatientEdge>, Fragmentable {
  node: <T = PatientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientEdgeSubscription
  extends Promise<AsyncIterator<PatientEdge>>,
    Fragmentable {
  node: <T = PatientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInsurance {
  count: Int;
}

export interface AggregateInsurancePromise
  extends Promise<AggregateInsurance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInsuranceSubscription
  extends Promise<AsyncIterator<AggregateInsurance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Prescription {
  id: ID_Output;
  dosis: String;
}

export interface PrescriptionPromise
  extends Promise<Prescription>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  patient: <T = PatientPromise>() => T;
  medication: <T = MedicationPromise>() => T;
  diagnosis: <T = DiagnosisPromise>() => T;
  dosis: () => Promise<String>;
}

export interface PrescriptionSubscription
  extends Promise<AsyncIterator<Prescription>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  patient: <T = PatientSubscription>() => T;
  medication: <T = MedicationSubscription>() => T;
  diagnosis: <T = DiagnosisSubscription>() => T;
  dosis: () => Promise<AsyncIterator<String>>;
}

export interface PrescriptionNullablePromise
  extends Promise<Prescription | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  patient: <T = PatientPromise>() => T;
  medication: <T = MedicationPromise>() => T;
  diagnosis: <T = DiagnosisPromise>() => T;
  dosis: () => Promise<String>;
}

export interface MedicationSubscriptionPayload {
  mutation: MutationType;
  node: Medication;
  updatedFields: String[];
  previousValues: MedicationPreviousValues;
}

export interface MedicationSubscriptionPayloadPromise
  extends Promise<MedicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MedicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MedicationPreviousValuesPromise>() => T;
}

export interface MedicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MedicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MedicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MedicationPreviousValuesSubscription>() => T;
}

export interface Record {
  id: ID_Output;
  date: String;
  details: String;
  discharged: Boolean;
}

export interface RecordPromise extends Promise<Record>, Fragmentable {
  id: () => Promise<ID_Output>;
  patient: <T = PatientPromise>() => T;
  diagnosis: <T = DiagnosisPromise>() => T;
  date: () => Promise<String>;
  details: () => Promise<String>;
  discharged: () => Promise<Boolean>;
}

export interface RecordSubscription
  extends Promise<AsyncIterator<Record>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  patient: <T = PatientSubscription>() => T;
  diagnosis: <T = DiagnosisSubscription>() => T;
  date: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  discharged: () => Promise<AsyncIterator<Boolean>>;
}

export interface RecordNullablePromise
  extends Promise<Record | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  patient: <T = PatientPromise>() => T;
  diagnosis: <T = DiagnosisPromise>() => T;
  date: () => Promise<String>;
  details: () => Promise<String>;
  discharged: () => Promise<Boolean>;
}

export interface MedicationPreviousValues {
  id: ID_Output;
  name: String;
}

export interface MedicationPreviousValuesPromise
  extends Promise<MedicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface MedicationPreviousValuesSubscription
  extends Promise<AsyncIterator<MedicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Patient {
  id: ID_Output;
  fName: String;
  lName: String;
  bDate: String;
  sex: String;
}

export interface PatientPromise extends Promise<Patient>, Fragmentable {
  id: () => Promise<ID_Output>;
  fName: () => Promise<String>;
  lName: () => Promise<String>;
  bDate: () => Promise<String>;
  sex: () => Promise<String>;
  insurance: <T = InsurancePromise>() => T;
  records: <T = FragmentableArray<Record>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  prescriptions: <T = FragmentableArray<Prescription>>(args?: {
    where?: PrescriptionWhereInput;
    orderBy?: PrescriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientSubscription
  extends Promise<AsyncIterator<Patient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fName: () => Promise<AsyncIterator<String>>;
  lName: () => Promise<AsyncIterator<String>>;
  bDate: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  insurance: <T = InsuranceSubscription>() => T;
  records: <T = Promise<AsyncIterator<RecordSubscription>>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  prescriptions: <T = Promise<AsyncIterator<PrescriptionSubscription>>>(args?: {
    where?: PrescriptionWhereInput;
    orderBy?: PrescriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientNullablePromise
  extends Promise<Patient | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fName: () => Promise<String>;
  lName: () => Promise<String>;
  bDate: () => Promise<String>;
  sex: () => Promise<String>;
  insurance: <T = InsurancePromise>() => T;
  records: <T = FragmentableArray<Record>>(args?: {
    where?: RecordWhereInput;
    orderBy?: RecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  prescriptions: <T = FragmentableArray<Prescription>>(args?: {
    where?: PrescriptionWhereInput;
    orderBy?: PrescriptionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DiagnosisConnection {
  pageInfo: PageInfo;
  edges: DiagnosisEdge[];
}

export interface DiagnosisConnectionPromise
  extends Promise<DiagnosisConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiagnosisEdge>>() => T;
  aggregate: <T = AggregateDiagnosisPromise>() => T;
}

export interface DiagnosisConnectionSubscription
  extends Promise<AsyncIterator<DiagnosisConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiagnosisEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiagnosisSubscription>() => T;
}

export interface RecordSubscriptionPayload {
  mutation: MutationType;
  node: Record;
  updatedFields: String[];
  previousValues: RecordPreviousValues;
}

export interface RecordSubscriptionPayloadPromise
  extends Promise<RecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecordPreviousValuesPromise>() => T;
}

export interface RecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecordPreviousValuesSubscription>() => T;
}

export interface AggregateMedication {
  count: Int;
}

export interface AggregateMedicationPromise
  extends Promise<AggregateMedication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMedicationSubscription
  extends Promise<AsyncIterator<AggregateMedication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InsuranceEdge {
  node: Insurance;
  cursor: String;
}

export interface InsuranceEdgePromise
  extends Promise<InsuranceEdge>,
    Fragmentable {
  node: <T = InsurancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InsuranceEdgeSubscription
  extends Promise<AsyncIterator<InsuranceEdge>>,
    Fragmentable {
  node: <T = InsuranceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PatientSubscriptionPayload {
  mutation: MutationType;
  node: Patient;
  updatedFields: String[];
  previousValues: PatientPreviousValues;
}

export interface PatientSubscriptionPayloadPromise
  extends Promise<PatientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientPreviousValuesPromise>() => T;
}

export interface PatientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientPreviousValuesSubscription>() => T;
}

export interface RecordConnection {
  pageInfo: PageInfo;
  edges: RecordEdge[];
}

export interface RecordConnectionPromise
  extends Promise<RecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecordEdge>>() => T;
  aggregate: <T = AggregateRecordPromise>() => T;
}

export interface RecordConnectionSubscription
  extends Promise<AsyncIterator<RecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecordSubscription>() => T;
}

export interface PatientPreviousValues {
  id: ID_Output;
  fName: String;
  lName: String;
  bDate: String;
  sex: String;
}

export interface PatientPreviousValuesPromise
  extends Promise<PatientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fName: () => Promise<String>;
  lName: () => Promise<String>;
  bDate: () => Promise<String>;
  sex: () => Promise<String>;
}

export interface PatientPreviousValuesSubscription
  extends Promise<AsyncIterator<PatientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fName: () => Promise<AsyncIterator<String>>;
  lName: () => Promise<AsyncIterator<String>>;
  bDate: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePatient {
  count: Int;
}

export interface AggregatePatientPromise
  extends Promise<AggregatePatient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientSubscription
  extends Promise<AsyncIterator<AggregatePatient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Insurance {
  id: ID_Output;
  name: String;
}

export interface InsurancePromise extends Promise<Insurance>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface InsuranceSubscription
  extends Promise<AsyncIterator<Insurance>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface InsuranceNullablePromise
  extends Promise<Insurance | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface RecordPreviousValues {
  id: ID_Output;
  date: String;
  details: String;
  discharged: Boolean;
}

export interface RecordPreviousValuesPromise
  extends Promise<RecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  details: () => Promise<String>;
  discharged: () => Promise<Boolean>;
}

export interface RecordPreviousValuesSubscription
  extends Promise<AsyncIterator<RecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  details: () => Promise<AsyncIterator<String>>;
  discharged: () => Promise<AsyncIterator<Boolean>>;
}

export interface PrescriptionPreviousValues {
  id: ID_Output;
  dosis: String;
}

export interface PrescriptionPreviousValuesPromise
  extends Promise<PrescriptionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dosis: () => Promise<String>;
}

export interface PrescriptionPreviousValuesSubscription
  extends Promise<AsyncIterator<PrescriptionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dosis: () => Promise<AsyncIterator<String>>;
}

export interface PrescriptionSubscriptionPayload {
  mutation: MutationType;
  node: Prescription;
  updatedFields: String[];
  previousValues: PrescriptionPreviousValues;
}

export interface PrescriptionSubscriptionPayloadPromise
  extends Promise<PrescriptionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PrescriptionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PrescriptionPreviousValuesPromise>() => T;
}

export interface PrescriptionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PrescriptionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PrescriptionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PrescriptionPreviousValuesSubscription>() => T;
}

export interface InsuranceConnection {
  pageInfo: PageInfo;
  edges: InsuranceEdge[];
}

export interface InsuranceConnectionPromise
  extends Promise<InsuranceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InsuranceEdge>>() => T;
  aggregate: <T = AggregateInsurancePromise>() => T;
}

export interface InsuranceConnectionSubscription
  extends Promise<AsyncIterator<InsuranceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InsuranceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInsuranceSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PatientConnection {
  pageInfo: PageInfo;
  edges: PatientEdge[];
}

export interface PatientConnectionPromise
  extends Promise<PatientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientEdge>>() => T;
  aggregate: <T = AggregatePatientPromise>() => T;
}

export interface PatientConnectionSubscription
  extends Promise<AsyncIterator<PatientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientSubscription>() => T;
}

export interface PrescriptionEdge {
  node: Prescription;
  cursor: String;
}

export interface PrescriptionEdgePromise
  extends Promise<PrescriptionEdge>,
    Fragmentable {
  node: <T = PrescriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PrescriptionEdgeSubscription
  extends Promise<AsyncIterator<PrescriptionEdge>>,
    Fragmentable {
  node: <T = PrescriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecord {
  count: Int;
}

export interface AggregateRecordPromise
  extends Promise<AggregateRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecordSubscription
  extends Promise<AsyncIterator<AggregateRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Patient",
    embedded: false
  },
  {
    name: "Diagnosis",
    embedded: false
  },
  {
    name: "Medication",
    embedded: false
  },
  {
    name: "Insurance",
    embedded: false
  },
  {
    name: "Prescription",
    embedded: false
  },
  {
    name: "Record",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
